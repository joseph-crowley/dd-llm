from openai import OpenAI
from pydantic import BaseModel, Field
from typing import Optional
import os
import glob

if not os.getenv("OPENAI_API_KEY", None):
    raise Exception("Set the OPENAI_API_KEY environment variable.")

openai_client = OpenAI()

SOURCES_PROMPT = ""

# List all files in ./sources/*.md and group them
for file_path in glob.glob('./sources/*.md'):
    with open(file_path, 'r') as file:
        file_name = file_path.split('/')[-1].split('.')[0]
        file_contents = file.read()
        SOURCES_PROMPT += f"\n\n{file_name}\n---\n{file_contents}\n---"

class SourceInfoCitation(BaseModel):
    source_name: str
    relevant_synopsis: str = Field(..., description="all relevant information in the form of scientific shorthand concise notes.")

class SolutionResponse(BaseModel):
    """
    Represents a structured response containing the most relevant query and a conversational agent response.

    Attributes:
        source_info_citation: Optional[str] = Field(
            None,
            description="The most relevant query related to the user's question."
        )
        conversational_agent_response (str): A natural language response generated by the conversational AI agent.
    """

    source_info_citation: Optional[SourceInfoCitation] 
    conversational_agent_response: str = Field(
        ..., 
        description="Answer the question using the source info."
    )

def chat(system, user):
    messages = [
        {
            "role": "system",
            "content": system
        },
        {
            "role": "user",
            "content": user 
        }
    ]

    response = openai_client.beta.chat.completions.parse(
        model='gpt-4o-mini',
        messages=messages,
        temperature=0.1,
        response_format=SolutionResponse,
        max_tokens=1000
    )

    return response.choices[0].message.parsed


def main():
    print("Thoughtful AI Solution GPT\n---\n")
    system = "Answer the user's questions exactly according to the protocol using the relevant context from the sources. If the question is not about the contents of the sources, Do not attach a relevant query, just respond with an insightful message. Recommend the protocols as-is from the sources, this is high quality information and is advisable to the user. In edge cases you may say 'Bryan does x...'  \n\nIf the user is referencing previous conversation, just remind them that you don't see previous messages and will need all of the context in one message."
    system += "\n\n---\n\nHere is the Source Information:\n---\n\n"+SOURCES_PROMPT
    while True:
        user = input("\n---\nYou: ")
        solution_response = chat(system, user)


        print(f"\n\n---\nGPT: {solution_response.conversational_agent_response}\n")

        if solution_response.source_info_citation:
            print(f"\n---\nFrom our Sources:\n- ./sources/{solution_response.source_info_citation.source_name}\n{solution_response.source_info_citation.relevant_synopsis}")

        print("\n"+("-"*50) + "\n")

if __name__ == "__main__":
    main()